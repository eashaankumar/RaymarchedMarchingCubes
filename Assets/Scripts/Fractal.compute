#pragma kernel CSMain

#include "Noise.compute"

RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float scale;
float amplitude;

static const float epsilon = 0.0001f;
static const float maxDst = 1000;
static const int maxStepCount = 500;
static const float3 planetCenter;
static const float planetRadius = 5.0;

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}
float planetSDF(float3 p)
{
    float height = (snoise(normalize(p) * scale) * 0.5 + 0.5) * amplitude;
    return length(p - planetCenter) - (planetRadius + height);
}

float3 normal(float3 p, float3 ro, float3 rd, float uv)
{
    float2 e = float2(0.0001, 0);
    float3 dira = mul(_CameraInverseProjection, float4(uv + e.xy, 0, 1)).xyz;
    float3 dirb = mul(_CameraInverseProjection, float4(uv + e.yx, 0, 1)).xyz;
    float3 a = ro + dira * planetSDF(p + e.xyy);
    float3 b = ro + dirb * planetSDF(p + e.yxy);
    return -normalize(cross(b - p, a - p));
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width,height;
    Destination.GetDimensions(width, height);

    float2 uv = id.xy / float2(width,height);

    // Background gradient
    
    // Raymarching:
    Ray ray = CreateCameraRay(uv * 2 - 1);
    float rayDst = 0;
    int marchSteps = 0;

    float4 result = float4(ray.direction * 0.5 + 0.5, 0);
    bool hit = false;
    float3 p;
    while (rayDst < maxDst && marchSteps < maxStepCount) {
        marchSteps ++;
        p = ray.origin + ray.direction * rayDst;
        float dst = planetSDF(p);
        
        // Ray has hit a surface
        if (dst <= epsilon) {
            //result = float4(normal(p, ray.origin, ray.direction, uv), 1);
            hit = true;
            break;
        }
        //ray.origin += ray.direction * dst;
        rayDst += dst;
    }
    // raynarching post conditions
    // 1. p must be the hit point in world space

    float planetHeight = length(p - planetCenter); // includes radius
    // not skybox
    if (hit)
    {
        float surfaceHeight = planetHeight - planetRadius;
        /*if (surfaceHeight > 0)
        {
            if (surfaceHeight < 0.9)
            {
                result = float4(0, 1, 0, 1);
            }
            else 
            {
                result = float4(1, 1, 1, 1);
            }
        }
        else {
            result = float4(0, 0, 0, 1);
        }*/
        result = float4(1, 1, 1, 1) * surfaceHeight;
    }

    Destination[id.xy] = result;
}
