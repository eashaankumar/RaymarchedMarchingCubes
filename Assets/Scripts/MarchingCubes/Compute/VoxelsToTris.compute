#pragma kernel CSMain

#include "Noise.compute"

struct Vertex {
    float3 position;
    float3 normal;
};

struct Triangle {
    Vertex vertexC;
    Vertex vertexB;
    Vertex vertexA;
};

uint width;
uint height;
RWTexture3D<float> Density;

AppendStructuredBuffer<Triangle> Triangles;
RWStructuredBuffer<int3> mapPosCenter; // tracks id of voxel looked at by center pixel

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _LightDirection; // must be normalized!
// colors
float3 _AmbientColor;
float3 _GrassColor;
float3 _SandColor;
float3 _WaterColor;
float3 _DirtColor;
float _Scale;
float _Impact;
float3 noisePosition = float3(0,0,0);
int _Terraforming;
float _BrushStrength;
int _BrushSize;


static const float epsilon = 0.001;
static const int MAX_RAY_VOX_TRAVERSE_COUNT = 250;
static const int MAX_SHADOW_RAY_VOX_TRAVERSE_COUNT = 50;

//float planetRadius = 100; // make sure they are synced!
static const float3 planetCenter = float3(0,0,0);
static const float planetRadius = 100;

static const int numThreads = 8;

////////////////////////////////////////// MARCHING CUBES ///////////////////////////////////////////////
static const float3 directions[16] = {
    float3(1, 1, 0),
    float3(-1, 1, 0),
    float3(1,-1, 0),
    float3(-1,-1, 0),
    float3(1, 0, 1),
    float3(-1, 0, 1),
    float3(1, 0,-1),
    float3(-1, 0,-1),
    float3(0, 1, 1),
    float3(0,-1, 1),
    float3(0, 1,-1),
    float3(0,-1,-1),

    float3(1, 1, 0),
    float3(-1, 1, 0),
    float3(0,-1, 1),
    float3(0,-1,-1)
};

static const int caseToNumPolys[256] = {
    0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 5, 2,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4,
    2, 3, 3, 4, 3, 4, 2, 3, 3, 4, 4, 5, 4, 5, 3, 2, 3, 4, 4, 3, 4, 5, 3, 2, 4, 5, 5, 4, 5, 2, 4, 1,
    1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 3, 2, 3, 3, 4, 3, 4, 4, 5, 3, 2, 4, 3, 4, 3, 5, 2,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 4, 3, 4, 4, 3, 4, 5, 5, 4, 4, 3, 5, 2, 5, 4, 2, 1,
    2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 2, 3, 3, 2, 3, 4, 4, 5, 4, 5, 5, 2, 4, 3, 5, 4, 3, 2, 4, 1,
    3, 4, 4, 5, 4, 5, 3, 4, 4, 5, 5, 2, 3, 4, 2, 1, 2, 3, 3, 2, 3, 4, 2, 1, 3, 2, 4, 1, 2, 1, 1, 0
};

// 256 rows, 5 vec4s (ignore 4th component) representing edges
const static int edge_connect_list[256 * 15] = {
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1,
3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1,
3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1,
3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1,
9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1,
1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1,
9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1,
2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1,
8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1,
9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1,
4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1,
3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1,
1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1,
4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1,
4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1,
9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1,
8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1,
1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1,
5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1,
2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1,
9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1,
0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1,
2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1,
10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1,
4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1,
5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1,
5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1,
9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1,
0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1,
1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1,
10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1,
8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1,
2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1,
7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1,
9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1,
2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1,
11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1,
9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1,
5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0,
11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0,
11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1,
10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1,
1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1,
9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1,
5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1,
2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1,
11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1,
0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1,
5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1,
6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1,
0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1,
3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1,
6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1,
5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1,
1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1,
10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1,
6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1,
1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1,
8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1,
7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9,
3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1,
5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1,
0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1,
9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6,
8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1,
5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11,
0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7,
6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1,
10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1,
10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1,
8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1,
1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1,
3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1,
0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1,
10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1,
0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1,
3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1,
6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1,
9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1,
8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1,
3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1,
6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1,
0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1,
10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1,
10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1,
1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1,
2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9,
7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1,
7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1,
2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7,
1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11,
11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1,
8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6,
0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1,
7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1,
10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1,
2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1,
6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1,
7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1,
2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1,
1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1,
10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1,
10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1,
0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1,
7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1,
6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1,
8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1,
9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1,
6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1,
1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1,
4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1,
10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3,
8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1,
0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1,
1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1,
8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1,
10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1,
4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3,
10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1,
5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1,
11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1,
9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1,
6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1,
7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1,
3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6,
7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1,
9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1,
3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1,
6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8,
9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1,
1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4,
4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10,
7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1,
6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1,
3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1,
0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1,
6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1,
1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1,
0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10,
11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5,
6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1,
5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1,
9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1,
1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8,
1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6,
10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1,
0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1,
5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1,
10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1,
11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1,
0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1,
9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1,
7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2,
2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1,
8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1,
9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1,
9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2,
1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1,
9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1,
9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1,
5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1,
5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1,
0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1,
10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4,
2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1,
0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11,
0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5,
9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1,
5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1,
3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9,
5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1,
8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1,
0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1,
8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1,
9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1,
0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1,
1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1,
3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4,
4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1,
9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3,
11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1,
11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1,
2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1,
9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7,
3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10,
1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1,
4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1,
4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1,
0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1,
3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1,
3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1,
0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1,
3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1,
9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1,
1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

struct EdgeConnection
{
    int edges[3];
};

/// <summary>
/// Returns edge triplet given case if of voxel and poligon index desired from edge_connect_list
/// </summary>
/// <param name="caseId">[0,256)</param>
/// <param name="polygonI">[0, 4)</param>
/// <returns></returns>
static EdgeConnection fromVec2ECL(int caseId, int polygonI)
{
    EdgeConnection eC;
    int row = caseId;
    int col = polygonI * 3; // first element of 3d vector
    int index = col + row * 15;
    eC.edges[0] = edge_connect_list[index];
    eC.edges[1] = edge_connect_list[index + 1];
    eC.edges[2] = edge_connect_list[index + 2];
    return eC;
}


static const int3 cornerToCubeVertex[8] = {
    int3(0, 0, 0),
    int3(0, 1, 0),
    int3(1, 1, 0),
    int3(1, 0, 0),
    int3(0, 0, 1),
    int3(0, 1, 1),
    int3(1, 1, 1),
    int3(1, 0, 1)
};

static const int2 edgeToCorners[12] = {
    int2(0, 1),
    int2(1, 2),
    int2(3, 2),
    int2(0, 3),
    int2(4, 5),
    int2(5, 6),
    int2(7, 6),
    int2(4, 7),
    int2(0, 4),
    int2(1, 5),
    int2(2, 6),
    int2(3, 7)
};

static const int directionCount = 15;

float lerpF(float a, float b, float w) {
    return a + w * (b - a);
}

float ridgedNoise(float3 p)
{
    float3 noise = abs(snoise(p));
    return 1.0f - noise;
}

float ridgedNoise2(float3 p, int octaves, int lacunarity, int gain)
{
    float noise = snoise(p);
    for (int i = 1; i < octaves; i++)
    {
        noise += snoise(p * lacunarity * i) / (gain * i);
    }
    return noise;
}


float density(int3 p)
{
    /*float3 p = float3(c)+float3(1, 1, 1) * 0.5;
    const float3 off = float3(2134, 213, 24);
    float d = distance(p, planetCtr);
    float3 pp = p + noisePosition;
    float noise = lerpF(-1.0, 1.0, d / (planetRadius * 2));
    return noise + (ridgedNoise2(normalize(pp * surfaceNoiseScale), 3, 2.0, 2.0) * 2 - 1) * surfaceNoiseImpact;*/

    float3 worldPos = p;
    float d = distance(worldPos, planetCenter);
    float noise = lerp(-1, 1, saturate(d / (planetRadius * 2)));
    float3 pp = worldPos + noisePosition;
    float den = Density[p + int3(1,1,1) * 1000/2];
    //return noise + ridgedNoise2(normalize(pp * surfaceNoiseScale), 3, 2.0, 2.0) * surfaceNoiseImpact;
    //return noise + ridgedNoise(normalize(pp * _Scale)) * _Impact;
    return noise + den;
}


int getBit(int3 v)
{
    return density(v) < 0 ? 0 : 1;
}

static int cellCase(int3 v0)
{
    int v0x = v0.x, v0y = v0.y, v0z = v0.z;
    int3 v1 = int3(v0x, v0y + 1, v0z);
    int3 v2 = int3(v0x + 1, v0y + 1, v0z);
    int3 v3 = int3(v0x + 1, v0y, v0z);
    int3 v4 = int3(v0x, v0y, v0z + 1);
    int3 v5 = int3(v0x, v0y + 1, v0z + 1);
    int3 v6 = int3(v0x + 1, v0y + 1, v0z + 1);
    int3 v7 = int3(v0x + 1, v0y, v0z + 1);

    int caseByteArray[8] = { getBit(v7), getBit(v6), getBit(v5), getBit(v4), getBit(v3), getBit(v2), getBit(v1), getBit(v0) };
    int caseByte = getBit(v7) << 7 | getBit(v6) << 6 |
        getBit(v5) << 5 | getBit(v4) << 4 |
        getBit(v3) << 3 | getBit(v2) << 2 |
        getBit(v1) << 1 | getBit(v0);
    return caseByte;
}

int3 CubeCornersToChunkNoiseGridPoints(int corner, int3 cubePos)
{
    return cornerToCubeVertex[corner] + cubePos;
}

float invLerp(float from, float to, float value) {
    return (value - from) / (to - from);
}

float InterpolateTriangleVertexOnCubeEdge(int3 cornerA, int3 cornerB)
{
    return invLerp(density(cornerA), density(cornerB), 0.0);
}

float3 NoiseGridToWorldPos(int3 p)
{
    return float3(float(p.x), float(p.y), float(p.z));
}

static const float2 normalOffset = float2(1, 0);

float3 calculateNormal(int3 coord)
{
    
    float dx = density(coord + normalOffset.xyy) - density(coord - normalOffset.xyy);
    float dy = density(coord + normalOffset.yxy) - density(coord - normalOffset.yxy);
    float dz = density(coord + normalOffset.yyx) - density(coord - normalOffset.yyx);
    return normalize(float3(dx, dy, dz));
    //return normalize(coord);
}

Vertex VertexFromInterpolatedNoise(int edgeId, int3 cubePos)
{
    Vertex v;
    int2 edgeCorners = edgeToCorners[edgeId];
    int3 cornerA = CubeCornersToChunkNoiseGridPoints(edgeCorners.x, cubePos);
    int3 cornerB = CubeCornersToChunkNoiseGridPoints(edgeCorners.y, cubePos);
    float time = InterpolateTriangleVertexOnCubeEdge(cornerA, cornerB);
    float3 cornerAWorld = NoiseGridToWorldPos(cornerA);
    float3 cornerBWorld = NoiseGridToWorldPos(cornerB);
    v.position = lerp(cornerAWorld, cornerBWorld, time);
    
    float3 normalA = calculateNormal(cornerA);
    float3 normalB = calculateNormal(cornerB);
    v.normal = normalize(lerp(normalA, normalB, time));
    return v;
}

float3 diff(float3 a, float3 b) {
    return float3(a.x - b.x, a.y - b.y, a.z - b.z);
}

float dot(float3 a, float3 b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

struct VoxelTris
{
    Triangle triangles[6];
    int numTris;
};

VoxelTris generateTriangle(int3 id)
{
    int caseByte = cellCase(id);
    int numTris = caseToNumPolys[caseByte];
    VoxelTris vTris;
    vTris.numTris = numTris;
    // init data
    Triangle temp;
    Vertex tempV;
    tempV.position = float3(0, 0, 0);
    tempV.normal = float3(0, 0, 0);
    temp.vertexC = tempV;
    temp.vertexB = tempV;
    temp.vertexA = tempV;
    vTris.triangles[0] = vTris.triangles[1] = vTris.triangles[2] = vTris.triangles[3] = vTris.triangles[4] = vTris.triangles[5] = temp;
    // find tris
    for (int t = 0; t < numTris; t++)
    {
        int edgesOfTri[3] = fromVec2ECL(caseByte, t);

        Vertex triVertexOnEdge1 = VertexFromInterpolatedNoise(edgesOfTri[0], id);
        Vertex triVertexOnEdge2 = VertexFromInterpolatedNoise(edgesOfTri[1], id);
        Vertex triVertexOnEdge3 = VertexFromInterpolatedNoise(edgesOfTri[2], id);
        Triangle tri;
        tri.vertexA = triVertexOnEdge1;
        tri.vertexB = triVertexOnEdge2;
        tri.vertexC = triVertexOnEdge3;

        //triangles.Append(tri);
        vTris.triangles[t] = tri;
    }
    return vTris;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////

struct Ray {
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction); 
    return CreateRay(origin, direction);
}

float sdSphere(float3 p, float r, float3 c) { return length(p - c) - r; }

float dot2(float3 v) { return dot(v, v); }
float udTriangle(float3 v1, float3 v2, float3 v3, float3 p)
{
    // prepare data    
    float3 v21 = v2 - v1; float3 p1 = p - v1;
    float3 v32 = v3 - v2; float3 p2 = p - v2;
    float3 v13 = v1 - v3; float3 p3 = p - v3;
    float3 nor = cross(v21, v13);

    return sqrt( // inside/outside test    
        (sign(dot(cross(v21, nor), p1)) +
            sign(dot(cross(v32, nor), p2)) +
            sign(dot(cross(v13, nor), p3)) < 2.0)
        ?
        // 3 edges    
        min(min(
            dot2(v21 * clamp(dot(v21, p1) / dot2(v21), 0.0, 1.0) - p1),
            dot2(v32 * clamp(dot(v32, p2) / dot2(v32), 0.0, 1.0) - p2)),
            dot2(v13 * clamp(dot(v13, p3) / dot2(v13), 0.0, 1.0) - p3))
        :
        // 1 face    
        dot(nor, p1) * dot(nor, p1) / dot2(nor));
}
float udTriangle2(Triangle t, float3 p)
{
    return udTriangle(t.vertexA.position, t.vertexB.position, t.vertexC.position, p);
}


bool getVoxel(int3 c)
{
    /*float3 p = float3(c)+float3(1, 1, 1) * 0.5;
    const float3 off = float3(2134, 213, 24);
    float d = distance(p, planetCenter);
    //float height = (snoise(normalize(p) * scale)) * amplitude;
    float3 pp = p + noisePosition;
    float noise = lerpF(-1.0, 1.0, d / (100 * 2));
    //return noise + (ridgedNoise2(normalize(pp * surfaceNoiseScale), 3, 2.0, 2.0) * 2 - 1) * surfaceNoiseImpact < 0;*/
    //return density(c) < 0;
    return false;
    //return noise < 0;
    //int i = to1D(c.x, c.y, c.z);
    //if (i < 0 || i >= voxelsPerAxis * voxelsPerAxis * voxelsPerAxis) return false;
   // return voxels[i] != 0;
}

const float sandHeight = 5;

float3 getColorAtVoxel(float3 p)
{
    //float3 p = float3(mapPos)+float3(1, 1, 1) * 0.5;
    float planetHeight = distance(p, planetCenter) - planetRadius - epsilon;
    if (planetHeight < 0) return _WaterColor;
    if (planetHeight < sandHeight) return _SandColor;
    if (planetHeight < 10) return _DirtColor;
    if (planetHeight < 15) return _GrassColor;
    return float3(1, 1, 1);
}

//static const float MAX_FLOAT = 3.402823466e+38F;

struct SDFTriRes
{
    float sdf;
    int triI;
};

SDFTriRes sdfTris(VoxelTris tris, float3 p, int3 mapPos)
{
    SDFTriRes res;
    res.triI = 0;
    res.sdf = udTriangle2(tris.triangles[0], p);
    float sdf = 0;
    if (tris.numTris >= 2) 
    { 
        sdf = min(res.sdf, udTriangle2(tris.triangles[1], p)); 
        if (sdf < res.sdf) res.triI = 1;
        res.sdf = sdf;
    }
    if (tris.numTris >= 3)
    {
        sdf = min(res.sdf, udTriangle2(tris.triangles[2], p));
        if (sdf < res.sdf) res.triI = 2;
        res.sdf = sdf;
    }
    if (tris.numTris >= 4)
    {
        sdf = min(res.sdf, udTriangle2(tris.triangles[3], p));
        if (sdf < res.sdf) res.triI = 3;
        res.sdf = sdf;
    }
    if (tris.numTris >= 5)
    {
        sdf = min(res.sdf, udTriangle2(tris.triangles[4], p));
        if (sdf < res.sdf) res.triI = 4;
        res.sdf = sdf;
    }
    if (tris.numTris >= 6)
    {
        sdf = min(res.sdf, udTriangle2(tris.triangles[5], p));
        if (sdf < res.sdf) res.triI = 5;
        res.sdf = sdf;
    }

    return res;
}

struct CheckRayHitsTriangle
{
    bool hits;
    Triangle tri;
    float d;
};

float3 getVoxelExitOffset(float3 sideDist, float3 deltaDist)
{
    if (sideDist.x < sideDist.y) {
        if (sideDist.x < sideDist.z) {
            return float3(deltaDist.x, 0, 0);
        }
        else {
            return float3(0,0,deltaDist.z);
        }
    }
    else {
        if (sideDist.y < sideDist.z) {
            return float3(0,deltaDist.y,0);
        }
        else {
            return float3(0,0,deltaDist.z);
        }
    }
}

bool isVoxelInBrushRadius(int3 mapPos)
{
    int3 offset = mapPos - mapPosCenter[0];
    return (offset.x >= -_BrushSize && offset.x <= _BrushSize
        && offset.y >= -_BrushSize && offset.y <= _BrushSize
        && offset.z >= -_BrushSize && offset.z <= _BrushSize);
}

void terraform(int3 mapPos, int2 id, int width, int height)
{
    if (id.x == width / 2 && id.y == height / 2)
    {
        for (int x = -_BrushSize; x <= _BrushSize; x++)
        {
            for (int y = -_BrushSize; y <= _BrushSize; y++)
            {
                for (int z = -_BrushSize; z <= _BrushSize; z++)
                {
                    int3 offset = int3(x, y, z);
                    float dis = length(offset);
                    Density[mapPos + offset + int3(1, 1, 1) * 1000 / 2] += _BrushStrength * exp(-dis / _BrushSize) * _Terraforming;
                }
            }
        }
    }
    /*float dis = distance(float3(mapPosCenter[0]), float3(mapPos));
    int3 offset = mapPos - mapPosCenter[0];
    if (offset.x >= -_BrushSize && offset.x <= _BrushSize
        && offset.y >= -_BrushSize && offset.y <= _BrushSize
        && offset.z >= -_BrushSize && offset.z <= _BrushSize)
    {
        float density = Density[mapPos + int3(1, 1, 1) * 1000 / 2];
        density += _BrushStrength * exp(-dis);
        Density[mapPos + int3(1, 1, 1) * 1000 / 2] = max(min(density, -1), 1);
    }*/
    /*if (isVoxelInBrushRadius(mapPos))
    {
        float dis = length(mapPos - mapPosCenter[0]);
        float density = Density[mapPos + int3(1, 1, 1) * 1000 / 2];
        density += _BrushStrength * exp(-dis / _BrushSize);
        if (density < -1) density = -1;
        if (density > 1) density = 1;
        Density[mapPos + int3(1, 1, 1) * 1000 / 2] = 1;
    }*/
}

struct RaymarchResult
{
    int3 mapPos;
    VoxelTris triangles;
};

RaymarchResult raymarchDDA(float3 o, float3 dir, int maxStepCount)
{
    // https://www.shadertoy.com/view/4dX3zl
    float3 p = o;
    // which box of the map we're in
    int3 mapPos = int3(floor(p));
    // length of ray from one xyz-side to another xyz-sideDist
    float3 deltaDist = abs(float3(1, 1, 1) * length(dir) / dir);
    int3 rayStep = int3(sign(dir));
    // length of ray from current position to next xyz-side
    float3 sideDist = (sign(dir) * (float3(mapPos.x, mapPos.y, mapPos.z) - o) + (sign(dir) * 0.5) + 0.5) * deltaDist;
    bool3 mask;
    bool miss = false;
    float pathLength = 0;
    RaymarchResult res;
    for (int i = 0; i < maxStepCount; i++) {
        //hits = hitsSurface(mapPos, o + dir * pathLength, dir, o + getVoxelExitOffset(sideDist, deltaDist));
        VoxelTris triangles = generateTriangle(mapPos);
        if (triangles.numTris > 0)
        {
            res.triangles = triangles;
            break;
        }
        if (sideDist.x < sideDist.y) {
            if (sideDist.x < sideDist.z) {
                pathLength = sideDist.x;
                sideDist.x += deltaDist.x;
                mapPos.x += rayStep.x;
                mask = bool3(true, false, false);
            }
            else {
                pathLength = sideDist.z;
                sideDist.z += deltaDist.z;
                mapPos.z += rayStep.z;
                mask = bool3(false, false, true);
            }
        }
        else {
            if (sideDist.y < sideDist.z) {
                pathLength = sideDist.y;
                sideDist.y += deltaDist.y;
                mapPos.y += rayStep.y;
                mask = bool3(false, true, false);
            }
            else {
                pathLength = sideDist.z;
                sideDist.z += deltaDist.z;
                mapPos.z += rayStep.z;
                mask = bool3(false, false, true);
            }
        }
        if (i == maxStepCount - 1)
        {
            miss = true;
        }
    }
    res.mapPos = mapPos;
    return res;
}


[numthreads(numThreads, numThreads, 1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
    if (!(id.x % 5 == 0 && id.y % 5 == 0)) return;
    float2 uv = id.xy / float2(width, height);

    // Raymarching:
    Ray ray = CreateCameraRay(uv * 2 - 1);

    float4 result = float4(ray.direction * 0.5 + 0.5, 0);

    RaymarchResult res = raymarchDDA(ray.origin, ray.direction, MAX_RAY_VOX_TRAVERSE_COUNT);

    if (id.x == width / 2 && id.y == height / 2)
    {
        mapPosCenter[0] = res.mapPos;
    }

    if (_Terraforming != 0)
    {
        terraform(res.mapPos, id, width, height);
    }

    for (int i = 0; i < res.triangles.numTris; i++)
    {
        Triangles.Append(res.triangles.triangles[i]);
    }
}
